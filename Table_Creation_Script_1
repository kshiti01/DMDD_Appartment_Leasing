------------####TABLE CREATION SCRIPT####--------------

------------####1.USER_ROLES####-----------------------
SET SERVEROUTPUT ON;
create or replace PROCEDURE USER_ROLE_CREATION IS TABLE_NAME VARCHAR2(1000);   
BEGIN
-- TABLE CREATION QUERY
   TABLE_NAME:='
CREATE TABLE USER_ROLES(
ROLE_ID NUMBER,
ROLE_NAME VARCHAR(25) NOT NULL,
ROLE_DESCRIPTION VARCHAR(100),
USER_TYPE CHAR(2) UNIQUE NOT NULL,
constraint PK_ROLE_ID PRIMARY KEY(ROLE_ID)
)';
   EXECUTE IMMEDIATE TABLE_NAME;
END USER_ROLE_CREATION;
/

DECLARE
        tbl_name varchar2(50);
        cnt NUMBER;
    BEGIN
        tbl_name := 'USER_ROLES';
        SELECT count(*) into cnt FROM user_tables where table_name = tbl_name;
        IF(cnt > 0)
        THEN
                DBMS_OUTPUT.PUT_LINE('TABLE USER_ROLES ALREADY EXISTS.');
                dbms_output.put_line('-----------------------------------------------------------------------------------------------------------');
        ELSE
        -- call to table creation stored procedure 
            BEGIN 
             USER_ROLE_CREATION;
            END;    
        DBMS_OUTPUT.PUT_LINE('TABLE USER_ROLES CREATED.');
        dbms_output.put_line('-----------------------------------------------------------------------------------------------------------');
        END IF;
        EXCEPTION 
          when no_data_found then
           dbms_output.put_line('Table does not exist!'); 
           -- call to table creation stored procedure 
           BEGIN 
             USER_ROLE_CREATION;
             dbms_output.put_line('Table USER_ROLES created successfully');
             dbms_output.put_line('-----------------------------------------------------------------------------------------------------------');
           END; 
            when others
                then
                dbms_output.put_line('OOPS Something went wrong!');
                dbms_output.put_line(dbms_utility.format_error_stack);
dbms_output.put_line('-----------------------------------------------------------------------------------------------------------');
END;
/


------------####2.USER_DETAILS####-----------------------
SET SERVEROUTPUT ON;
create or replace procedure user_details_creation is table_name varchar2(1000);  
BEGIN
-- table creation query
   table_name:='CREATE TABLE USER_DETAILS(
user_id NUMBER(10) GENERATED BY DEFAULT AS IDENTITY(START WITH 100 INCREMENT BY 1),
first_name VARCHAR(50) NOT NULL,
last_name VARCHAR(50) NOT NULL,
phone_no NUMBER(10) NOT NULL,
email VARCHAR(50) NOT NULL,
user_name VARCHAR(50) NOT NULL,
pass_word VARCHAR(50) NOT NULL,
address_line1 VARCHAR(100) NOT NULL,
address_line2 VARCHAR(100),
city VARCHAR(25) NOT NULL,
zipcode NUMBER(6) NOT NULL,
residence_state VARCHAR(25) NOT NULL,
country VARCHAR(10) NOT NULL,
dob DATE NOT NULL,
sex VARCHAR(10),
role_id NUMBER NOT NULL,
date_created  date DEFAULT SYSDATE NOT NULL,
CHECK(REGEXP_LIKE(email,''^[A-Za-z]+[A-Za-z0-9.]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,4}$'')),
CHECK(REGEXP_LIKE(first_name,''^[A-Za-z0-9]{1,16}$'')),
CHECK(REGEXP_LIKE(last_name,''^[A-Za-z0-9]{1,16}$'')),
CHECK(REGEXP_LIKE(phone_no,''^[0-9]{10}$'')),
CHECK(REGEXP_LIKE(user_name,''^[A-Za-z0-9]{1,16}$'')),
constraint PK_USER_ID PRIMARY KEY(USER_ID),
FOREIGN KEY (role_id) REFERENCES USER_ROLES(role_id)
)';
   EXECUTE IMMEDIATE table_name;
end;
/
DECLARE
        tbl_name varchar2(50);
        cnt NUMBER;
    BEGIN
        tbl_name := 'USER_DETAILS';
        SELECT count(*) into cnt FROM user_tables where table_name = tbl_name;
        IF(cnt > 0)
        THEN
                DBMS_OUTPUT.PUT_LINE('TABLE USER_DETAILS ALREADY EXISTS.');
                dbms_output.put_line('-----------------------------------------------------------------------------------------------------------');
        ELSE
        -- call to table creation stored procedure 
            BEGIN 
             user_details_creation;
            END;    
        DBMS_OUTPUT.PUT_LINE('TABLE USER_DETAILS CREATED.');
        dbms_output.put_line('-----------------------------------------------------------------------------------------------------------');
        END IF;
        EXCEPTION 
          when no_data_found then
           dbms_output.put_line('Table does not exist!'); 
           -- call to table creation stored procedure 
           BEGIN 
             user_details_creation;
             dbms_output.put_line('Table USER_DETAILS created successfully');
             dbms_output.put_line('-----------------------------------------------------------------------------------------------------------');
           END; 
            when others
                then
                dbms_output.put_line('OOPS Something went wrong!');
                dbms_output.put_line(dbms_utility.format_error_stack);
dbms_output.put_line('-----------------------------------------------------------------------------------------------------------');
END;
/



------------####3.MANAGEMENT_DETAILS####-----------------------
SET SERVEROUTPUT ON;
create or replace procedure management_details_creation is table_name varchar2(1000);   
BEGIN
-- table creation query
   table_name:='
CREATE TABLE MANAGEMENT_DETAILS(
MGID NUMBER GENERATED BY DEFAULT AS IDENTITY(START WITH 200 INCREMENT BY 1),
M_COMPANY_NAME VARCHAR(100) NOT NULL,
M_REGISTRATION_STATUS CHAR(1) NOT NULL,
M_DATE_CREATED DATE DEFAULT SYSDATE NOT NULL,
constraint PK_MGID PRIMARY KEY(MGID)
)';
   EXECUTE IMMEDIATE table_name;
end management_details_creation;
/
DECLARE
        tbl_name varchar2(50);
        cnt NUMBER;
    BEGIN
        tbl_name := 'MANAGEMENT_DETAILS';
        SELECT count(*) into cnt FROM user_tables where table_name = tbl_name;
        IF(cnt > 0)
        THEN
                DBMS_OUTPUT.PUT_LINE('TABLE MANAGEMENT_DETAILS ALREADY EXISTS.');
                dbms_output.put_line('-----------------------------------------------------------------------------------------------------------');
        ELSE
        -- call to table creation stored procedure 
            BEGIN 
             management_details_creation;
            END;    
        DBMS_OUTPUT.PUT_LINE('TABLE MANAGEMENT_DETAILS CREATED.');
        dbms_output.put_line('-----------------------------------------------------------------------------------------------------------');
        END IF;
        EXCEPTION 
          when no_data_found then
           dbms_output.put_line('Table does not exist!'); 
           -- call to table creation stored procedure 
           BEGIN 
             management_details_creation;
             dbms_output.put_line('Table MANAGEMENT_DETAILS created successfully');
             dbms_output.put_line('-----------------------------------------------------------------------------------------------------------');
           END; 
            when others
                then
                dbms_output.put_line('OOPS Something went wrong!');
                dbms_output.put_line(dbms_utility.format_error_stack);
dbms_output.put_line('-----------------------------------------------------------------------------------------------------------');
END;
/

------------####4.APARTMENT_DETAILS####-----------------------
SET SERVEROUTPUT ON;
create or replace procedure apartment_details_creation is table_name varchar2(4000);
BEGIN
-- table creation query
table_name:='CREATE TABLE apartment_details
             (
                          aid                 NUMBER  generated always AS identity(start WITH 300 increment BY 1),
                          availability        varchar2(255) NOT NULL,
                          no_of_tenants       number NOT NULL,
                          building_type       varchar2(255) NOT NULL,
                          built_year          number(4) NOT NULL,
                          location            varchar2(255) NOT NULL,
                          unit_no             number NOT NULL,
                          sqt_area            number NOT NULL,
                          building_no         number NOT NULL,
                          ac_system           CHAR(1) NOT NULL,
                          heater_system       CHAR(1) NOT NULL,
                          hot_water           CHAR(1) NOT NULL,
                          gas_connection      CHAR(1) NOT NULL,
                          electricity         CHAR(1) NOT NULL,
                          asbestos            CHAR(1) NOT NULL,
                          refrigarator        CHAR(1) NOT NULL,
                          no_of_bedrooms      CHAR(1) NOT NULL,
                          floor_no            number NOT NULL,
                          parking_available   CHAR(1) NOT NULL,
                          no_of_keys          number(1) NOT NULL,
                          oven                CHAR(1) NOT NULL,
                          status_keylock      CHAR(1) NOT NULL,
                          status_windows      CHAR(1) NOT NULL,
                          status_door         CHAR(1) NOT NULL,
                          status_toiletsink   CHAR(1) NOT NULL,
                          status_washsink     CHAR(1) NOT NULL,
                          owner_name          varchar2(255) NOT NULL,
                          special_description varchar2(255) NOT NULL,
                          no_of_bathrooms     number NOT NULL,
                          no_of_balcony       varchar2(255) NOT NULL,
                          broker_commission   number NOT NULL,
                          mgid                number NOT NULL,
                          CONSTRAINT pk_aid PRIMARY KEY (aid),
                          CONSTRAINT fk_apt_mgid FOREIGN KEY (mgid) REFERENCES admin.management_details (mgid)
             )';


EXECUTE IMMEDIATE table_name;
end apartment_details_creation;
/
DECLARE
        tbl_name varchar2(50);
        cnt NUMBER;
    BEGIN
        tbl_name := 'APARTMENT_DETAILS';
        SELECT count(*) into cnt FROM user_tables where table_name = tbl_name;
        IF(cnt > 0)
        THEN
                DBMS_OUTPUT.PUT_LINE('TABLE APARTMENT_DETAILS ALREADY EXISTS.');
                dbms_output.put_line('-----------------------------------------------------------------------------------------------------------');
        ELSE
        -- call to table creation stored procedure 
            BEGIN 
             apartment_details_creation;
            END;    
        DBMS_OUTPUT.PUT_LINE('TABLE APARTMENT_DETAILS CREATED.');
        dbms_output.put_line('-----------------------------------------------------------------------------------------------------------');
        END IF;
        EXCEPTION 
          when no_data_found then
           dbms_output.put_line('Table does not exist!'); 
           -- call to table creation stored procedure 
           BEGIN 
             apartment_details_creation;
             dbms_output.put_line('Table APARTMENT_DETAILS created successfully');
             dbms_output.put_line('-----------------------------------------------------------------------------------------------------------');
           END; 
            when others
                then
                dbms_output.put_line('OOPS Something went wrong!');
                dbms_output.put_line(dbms_utility.format_error_stack);
dbms_output.put_line('-----------------------------------------------------------------------------------------------------------');
END;
/
------------####5.CONTRACTOR_DETAILS####-----------------------
SET SERVEROUTPUT ON;
create or replace procedure contractor_details_creation is table_name varchar2(3000);
BEGIN
-- table creation query
table_name:='CREATE TABLE contractor_details(
co_id Number GENERATED BY DEFAULT AS IDENTITY(START WITH 500 INCREMENT BY 1),
staff_role varchar2(255) NOT NULL,
co_specialty varchar2(255) NOT NULL,
co_hours Number NOT NULL,
co_rate Number NOT NULL,
co_emp_start_date date NOT NULL,
co_emp_end_date date NOT NULL,
mgid Number,
CONSTRAINT PK_COID PRIMARY KEY (co_id),
CONSTRAINT FK_CONTR_MGID FOREIGN KEY (MGID) REFERENCES ADMIN.MANAGEMENT_DETAILS(MGID)
)';

EXECUTE IMMEDIATE table_name;
end contractor_details_creation;


/
DECLARE
        tbl_name varchar2(50);
        cnt NUMBER;
    BEGIN
        tbl_name := 'CONTRACTOR_DETAILS';
        SELECT count(*) into cnt FROM user_tables where table_name = tbl_name;
        IF(cnt > 0)
        THEN
                DBMS_OUTPUT.PUT_LINE('TABLE CONTRACTOR_DETAILS ALREADY EXISTS.');
                dbms_output.put_line('-----------------------------------------------------------------------------------------------------------');
        ELSE
        -- call to table creation stored procedure 
            BEGIN 
             contractor_details_creation;
            END;    
        DBMS_OUTPUT.PUT_LINE('TABLE CONTRACTOR_DETAILS CREATED.');
        dbms_output.put_line('-----------------------------------------------------------------------------------------------------------');
        END IF;
        EXCEPTION 
          when no_data_found then
           dbms_output.put_line('Table does not exist!'); 
           -- call to table creation stored procedure 
           BEGIN 
             contractor_details_creation;
             dbms_output.put_line('Table CONTRACTOR_DETAILS created successfully');
             dbms_output.put_line('-----------------------------------------------------------------------------------------------------------');
           END; 
            when others
                then
                dbms_output.put_line('OOPS Something went wrong!');
                dbms_output.put_line(dbms_utility.format_error_stack);
dbms_output.put_line('-----------------------------------------------------------------------------------------------------------');
END;
/

------------####6.MAINTENANCE_DETAILS####-----------------------
SET SERVEROUTPUT ON;
create or replace procedure maintenance_details_creation is table_name varchar2(3000);
BEGIN
-- table creation query
table_name:='CREATE TABLE maintenance_details
             (
  mt_id Number GENERATED BY DEFAULT AS IDENTITY(START WITH 1200 INCREMENT BY 1),
  MAINTENANCE_TYPE varchar2(255) NOT NULL,
  MAINTENANCE_COMMENTS varchar2(255) NOT NULL,
  FREQUENCY Number NOT NULL,
  DATE_LAST_DONE date NOT NULL,
  COMPLIANCE_STATUS char(1) NOT NULL,
  mgid Number NOT NULL,

CONSTRAINT PK_MT_ID PRIMARY KEY (mt_id),
CONSTRAINT FK_MT_MGID FOREIGN KEY (MGID) REFERENCES ADMIN.MANAGEMENT_DETAILS(MGID)
    )';

EXECUTE IMMEDIATE table_name;
end maintenance_details_creation;

/
DECLARE
        tbl_name varchar2(50);
        cnt NUMBER;
    BEGIN
        tbl_name := 'MAINTENANCE_DETAILS';
        SELECT count(*) into cnt FROM user_tables where table_name = tbl_name;
        IF(cnt > 0)
        THEN
                DBMS_OUTPUT.PUT_LINE('TABLE MAINTENANCE_DETAILS ALREADY EXISTS.');
                dbms_output.put_line('-----------------------------------------------------------------------------------------------------------');
        ELSE
        -- call to table creation stored procedure 
            BEGIN 
             maintenance_details_creation;
            END;    
        DBMS_OUTPUT.PUT_LINE('TABLE MAINTENANCE_DETAILS CREATED.');
        dbms_output.put_line('-----------------------------------------------------------------------------------------------------------');
        END IF;
        EXCEPTION 
          when no_data_found then
           dbms_output.put_line('Table does not exist!'); 
           -- call to table creation stored procedure 
           BEGIN 
             maintenance_details_creation;
             dbms_output.put_line('Table MAINTENANCE_DETAILS created successfully');
             dbms_output.put_line('-----------------------------------------------------------------------------------------------------------');
           END; 
            when others
                then
                dbms_output.put_line('OOPS Something went wrong!');
                dbms_output.put_line(dbms_utility.format_error_stack);
dbms_output.put_line('-----------------------------------------------------------------------------------------------------------');
END;
/


------------####7.BOOKING####-----------------------
SET SERVEROUTPUT ON;
create or replace procedure booking_details_creation is table_name varchar2(3000);
BEGIN
-- table creation query
table_name:='CREATE TABLE booking
             (
  bookid Number GENERATED BY DEFAULT AS IDENTITY(START WITH 400 INCREMENT BY 1),
  user_id Number NOT NULL,
  aid Number NOT NULL,
  mgid Number NOT NULL,
  booking_fees Number NOT NULL,
  booking_status char(1) NOT NULL,
  booking_date date NOT NULL,

CONSTRAINT PK_BOOK_ID PRIMARY KEY (bookid),
CONSTRAINT FK_USER_ID FOREIGN KEY (user_id) REFERENCES ADMIN.USER_DETAILS(USER_ID),
CONSTRAINT FK_AID FOREIGN KEY (AID) REFERENCES ADMIN.APARTMENT_DETAILS(AID),
CONSTRAINT FK_MG_ID FOREIGN KEY (MGID) REFERENCES ADMIN.MANAGEMENT_DETAILS(MGID)
    )';
EXECUTE IMMEDIATE table_name;
end booking_details_creation;


/
DECLARE
        tbl_name varchar2(50);
        cnt NUMBER;
    BEGIN
        tbl_name := 'BOOKING';
        SELECT count(*) into cnt FROM user_tables where table_name = tbl_name;
        IF(cnt > 0)
        THEN
                DBMS_OUTPUT.PUT_LINE('TABLE BOOKING ALREADY EXISTS.');
                dbms_output.put_line('-----------------------------------------------------------------------------------------------------------');
        ELSE
        -- call to table creation stored procedure 
            BEGIN 
             booking_details_creation;
            END;    
        DBMS_OUTPUT.PUT_LINE('TABLE BOOKING CREATED.');
        dbms_output.put_line('-----------------------------------------------------------------------------------------------------------');
        END IF;
        EXCEPTION 
          when no_data_found then
           dbms_output.put_line('Table does not exist!'); 
           -- call to table creation stored procedure 
           BEGIN 
             booking_details_creation;
             dbms_output.put_line('Table BOOKING created successfully');
             dbms_output.put_line('-----------------------------------------------------------------------------------------------------------');
           END; 
            when others
                then
                dbms_output.put_line('OOPS Something went wrong!');
                dbms_output.put_line(dbms_utility.format_error_stack);
dbms_output.put_line('-----------------------------------------------------------------------------------------------------------');
END;
/


------------####8.LEASE_DETAILS####-----------------------
SET SERVEROUTPUT ON;
create or replace procedure lease_details_creation is table_name varchar2(4000);   
BEGIN
-- table creation query
   table_name:='CREATE TABLE LEASE_DETAILS (
 lid NUMBER GENERATED BY DEFAULT AS IDENTITY(START WITH 600 INCREMENT BY 1),
 lease_type CHAR(1) NOT NULL,
 lease_start_date date NOT NULL,
 lease_end_date date NOT NULL,
 is_sublet_allowed char(1) NOT NULL,
 subletting_charges Number NOT NULL, 
 is_active char(1) NOT NULL,
 security_deposit Number NOT NULL,
 balance_amount Number,
 date_created  date DEFAULT SYSDATE NOT NULL,
 rent Number NOT NULL,
 is_cancellation_allowed char(1) NOT NULL,
 cancellation_charges Number, 
 cancel_status varchar(100),
 is_extension_allowed char(1) NOT NULL,
 extension_status char(1),
 extension_charges Number,
 extension_comments varchar(100),
 new_start_date date,
 new_end_date date,
 new_rent Number,
 aid NUMBER NOT NULL,
 CONSTRAINT PK_LID PRIMARY KEY (LID),
 CONSTRAINT FK_LEASE_AID FOREIGN KEY (AID) REFERENCES ADMIN.APARTMENT_DETAILS(AID)
 )';
   EXECUTE IMMEDIATE table_name;
end lease_details_creation;


/
DECLARE
        tbl_name varchar2(50);
        cnt NUMBER;
    BEGIN
        tbl_name := 'LEASE_DETAILS';
        SELECT count(*) into cnt FROM user_tables where table_name = tbl_name;
        IF(cnt > 0)
        THEN
                DBMS_OUTPUT.PUT_LINE('TABLE LEASE_DETAILS ALREADY EXISTS.');
                dbms_output.put_line('-----------------------------------------------------------------------------------------------------------');
        ELSE
        -- call to table creation stored procedure 
            BEGIN 
             lease_details_creation;
            END;    
        DBMS_OUTPUT.PUT_LINE('TABLE LEASE_DETAILS CREATED.');
        dbms_output.put_line('-----------------------------------------------------------------------------------------------------------');
        END IF;
        EXCEPTION 
          when no_data_found then
           dbms_output.put_line('Table does not exist!'); 
           -- call to table creation stored procedure 
           BEGIN 
             lease_details_creation;
             dbms_output.put_line('Table LEASE_DETAILS created successfully');
             dbms_output.put_line('-----------------------------------------------------------------------------------------------------------');
           END; 
            when others
                then
                dbms_output.put_line('OOPS Something went wrong!');
                dbms_output.put_line(dbms_utility.format_error_stack);
dbms_output.put_line('-----------------------------------------------------------------------------------------------------------');
END;
/

------------####9.TENANT_DETAILS####-----------------------
SET SERVEROUTPUT ON;
create or replace procedure tenant_details_creation is table_name varchar2(4000);
BEGIN
-- table creation query
table_name:='
CREATE TABLE TENANT_DETAILS(
tid NUMBER GENERATED BY DEFAULT AS IDENTITY(START WITH 700 INCREMENT BY 1),
lid NUMBER NOT NULL,
id_proof_submitted CHAR(1) NOT NULL,
id_proof_document_type VARCHAR2(255) NOT NULL,
CONSTRAINT PK_TID PRIMARY KEY (TID),
CONSTRAINT FK_LID FOREIGN KEY (LID)
REFERENCES ADMIN.LEASE_DETAILS(LID)
)';
EXECUTE IMMEDIATE table_name;
end tenant_details_creation;


/
DECLARE
        tbl_name varchar2(50);
        cnt NUMBER;
    BEGIN
        tbl_name := 'TENANT_DETAILS';
        SELECT count(*) into cnt FROM user_tables where table_name = tbl_name;
        IF(cnt > 0)
        THEN
                DBMS_OUTPUT.PUT_LINE('TABLE TENANT_DETAILS ALREADY EXISTS.');
                dbms_output.put_line('-----------------------------------------------------------------------------------------------------------');
        ELSE
        -- call to table creation stored procedure 
            BEGIN 
             tenant_details_creation;
            END;    
        DBMS_OUTPUT.PUT_LINE('TABLE TENANT_DETAILS CREATED.');
        dbms_output.put_line('-----------------------------------------------------------------------------------------------------------');
        END IF;
        EXCEPTION 
          when no_data_found then
           dbms_output.put_line('Table does not exist!'); 
           -- call to table creation stored procedure 
           BEGIN 
             tenant_details_creation;
             dbms_output.put_line('Table TENANT_DETAILS created successfully');
             dbms_output.put_line('-----------------------------------------------------------------------------------------------------------');
           END; 
            when others
                then
                dbms_output.put_line('OOPS Something went wrong!');
                dbms_output.put_line(dbms_utility.format_error_stack);
dbms_output.put_line('-----------------------------------------------------------------------------------------------------------');
END;
/

------------####10.PAYMENT_DETAILS####-----------------------
SET SERVEROUTPUT ON;
create or replace procedure payment_details_creation is table_name varchar2(3000);
BEGIN
-- table creation query
table_name:='CREATE TABLE payment_details
             (

  pid Number GENERATED BY DEFAULT AS IDENTITY(START WITH 800 INCREMENT BY 1),
  lid Number NOT NULL,
  payment_date date NOT NULL,
  payment_method varchar2(255) NOT NULL,
  payment_by_name varchar2(255) NOT NULL,
  payment_to_name varchar2(255) NOT NULL,
  payment_amount Number NOT NULL,
  payment_category varchar2(255) NOT NULL,
  payment_status varchar2(255) NOT NULL,

CONSTRAINT PK_P_ID PRIMARY KEY (pid),
CONSTRAINT FK_L_ID FOREIGN KEY (lid) REFERENCES ADMIN.LEASE_DETAILS(lid)

    )';
EXECUTE IMMEDIATE table_name;
end payment_details_creation;

/
DECLARE
        tbl_name varchar2(50);
        cnt NUMBER;
    BEGIN
        tbl_name := 'PAYMENT_DETAILS';
        SELECT count(*) into cnt FROM user_tables where table_name = tbl_name;
        IF(cnt > 0)
        THEN
                DBMS_OUTPUT.PUT_LINE('TABLE PAYMENT_DETAILS ALREADY EXISTS.');
                dbms_output.put_line('-----------------------------------------------------------------------------------------------------------');
        ELSE
        -- call to table creation stored procedure 
            BEGIN 
             payment_details_creation;
            END;    
        DBMS_OUTPUT.PUT_LINE('TABLE PAYMENT_DETAILS CREATED.');
        dbms_output.put_line('-----------------------------------------------------------------------------------------------------------');
        END IF;
        EXCEPTION 
          when no_data_found then
           dbms_output.put_line('Table does not exist!'); 
           -- call to table creation stored procedure 
           BEGIN 
             payment_details_creation;
             dbms_output.put_line('Table PAYMENT_DETAILS created successfully');
             dbms_output.put_line('-----------------------------------------------------------------------------------------------------------');
           END; 
            when others
                then
                dbms_output.put_line('OOPS Something went wrong!');
                dbms_output.put_line(dbms_utility.format_error_stack);
dbms_output.put_line('-----------------------------------------------------------------------------------------------------------');
END;
/

------------####11.NOTIFICATION####-----------------------
SET SERVEROUTPUT ON;
create or replace procedure notification_creation is table_name varchar2(4000);
BEGIN
-- table creation query
table_name:='CREATE TABLE NOTIFICATION(
nid NUMBER GENERATED BY DEFAULT AS IDENTITY(START WITH 900 INCREMENT BY 1),
notification_type VARCHAR(50) NOT NULL,
notification_comments VARCHAR(100) NOT NULL,
date_created DATE DEFAULT SYSDATE NOT NULL,
notification_date DATE NOT NULL,
mgid NUMBER NOT NULL,
tid NUMBER NOT NULL,
CONSTRAINT CHK_NTFY_DATE CHECK (notification_date >= date_created),
CONSTRAINT PK_NID PRIMARY KEY (NID),
CONSTRAINT FK_MGID FOREIGN KEY (MGID) REFERENCES ADMIN.MANAGEMENT_DETAILS(MGID),
CONSTRAINT FK_TID FOREIGN KEY (TID) REFERENCES ADMIN.TENANT_DETAILS(TID)
)';
EXECUTE IMMEDIATE table_name;
end notification_creation;

/
DECLARE
        tbl_name varchar2(50);
        cnt NUMBER;
    BEGIN
        tbl_name := 'NOTIFICATION';
        SELECT count(*) into cnt FROM user_tables where table_name = tbl_name;
        IF(cnt > 0)
        THEN
                DBMS_OUTPUT.PUT_LINE('TABLE NOTIFICATION ALREADY EXISTS.');
                dbms_output.put_line('-----------------------------------------------------------------------------------------------------------');
        ELSE
        -- call to table creation stored procedure 
            BEGIN 
             notification_creation;
            END;    
        DBMS_OUTPUT.PUT_LINE('TABLE NOTIFICATION CREATED.');
        dbms_output.put_line('-----------------------------------------------------------------------------------------------------------');
        END IF;
        EXCEPTION 
          when no_data_found then
           dbms_output.put_line('Table does not exist!'); 
           -- call to table creation stored procedure 
           BEGIN 
             notification_creation;
             dbms_output.put_line('Table NOTIFICATION created successfully');
             dbms_output.put_line('-----------------------------------------------------------------------------------------------------------');
           END; 
            when others
                then
                dbms_output.put_line('OOPS Something went wrong!');
                dbms_output.put_line(dbms_utility.format_error_stack);
dbms_output.put_line('-----------------------------------------------------------------------------------------------------------');
END;
/

------------####12.LAUNDRY_DETAILS####-----------------------
SET SERVEROUTPUT ON;
create or replace procedure LAUNDRY_DETAILS_CREATION is table_name varchar2(4000);
BEGIN
-- table creation query
table_name:='CREATE TABLE LAUNDRY_DETAILS(
la_id NUMBER GENERATED BY DEFAULT AS IDENTITY(START WITH 800 INCREMENT BY 1),
la_machine_no Number NOT NULL,
la_washing_load varchar(15) NOT NULL,
la_drying_load varchar(15) NOT NULL,
la_time_started timestamp NOT NULL,
la_time_ended timestamp NOT NULL,
la_status char(1) NOT NULL,
la_fee_washing Number NOT NULL,
la_fee_drying Number NOT NULL,
la_payment_received char(1) NOT NULL,
NID NUMBER NOT NULL,
CONSTRAINT PK_LA_ID PRIMARY KEY (LA_ID),
CONSTRAINT FK_LA_NID FOREIGN KEY (NID) REFERENCES ADMIN.NOTIFICATION(NID)
)';
EXECUTE IMMEDIATE table_name;
end LAUNDRY_DETAILS_CREATION;

/
DECLARE
        tbl_name varchar2(50);
        cnt NUMBER;
    BEGIN
        tbl_name := 'LAUNDRY_DETAILS';
        SELECT count(*) into cnt FROM user_tables where table_name = tbl_name;
        IF(cnt > 0)
        THEN
                DBMS_OUTPUT.PUT_LINE('TABLE LAUNDRY_DETAILS ALREADY EXISTS.');
                dbms_output.put_line('-----------------------------------------------------------------------------------------------------------');
        ELSE
        -- call to table creation stored procedure 
            BEGIN 
             LAUNDRY_DETAILS_CREATION;
            END;    
        DBMS_OUTPUT.PUT_LINE('TABLE LAUNDRY_DETAILS CREATED.');
        dbms_output.put_line('-----------------------------------------------------------------------------------------------------------');
        END IF;
        EXCEPTION 
          when no_data_found then
           dbms_output.put_line('Table does not exist!'); 
           -- call to table creation stored procedure 
           BEGIN 
             LAUNDRY_DETAILS_CREATION;
             dbms_output.put_line('Table LAUNDRY_DETAILS created successfully');
             dbms_output.put_line('-----------------------------------------------------------------------------------------------------------');
           END; 
            when others
                then
                dbms_output.put_line('OOPS Something went wrong!');
                dbms_output.put_line(dbms_utility.format_error_stack);
dbms_output.put_line('-----------------------------------------------------------------------------------------------------------');
END;
/

------------####13.COMPLAINT_DETAILS####-----------------------
SET SERVEROUTPUT ON;
create or replace procedure complaint_details_creation is table_name varchar2(4000);
BEGIN
-- table creation query
table_name:='CREATE TABLE COMPLAINT_DETAILS(
cdid Number GENERATED BY DEFAULT AS IDENTITY(START WITH 1100 INCREMENT BY 1),
c_ref_no Number NOT NULL,
c_raised_by_name varchar(50) NOT NULL,
c_raised_by_apt Number NOT NULL,
c_raised_time timestamp NOT NULL,
c_raised_date date NOT NULL,
c_category varchar(50) NOT NULL,
c_severity varchar(10) NOT NULL,
c_description varchar(100) NOT NULL,
c_status char(1) NOT NULL,
c_closure_date date NOT NULL,
CO_ID NUMBER NOT NULL,
NID NUMBER NOT NULL,
CONSTRAINT PK_CDID PRIMARY KEY (CDID),
CONSTRAINT FK_CO_ID FOREIGN KEY (CO_ID) REFERENCES ADMIN.CONTRACTOR_DETAILS(CO_ID),
CONSTRAINT FK_COMP_NID FOREIGN KEY (NID) REFERENCES ADMIN.NOTIFICATION(NID)
)';
EXECUTE IMMEDIATE table_name;
end complaint_details_creation;

/
DECLARE
        tbl_name varchar2(50);
        cnt NUMBER;
    BEGIN
        tbl_name := 'COMPLAINT_DETAILS';
        SELECT count(*) into cnt FROM user_tables where table_name = tbl_name;
        IF(cnt > 0)
        THEN
                DBMS_OUTPUT.PUT_LINE('TABLE COMPLAINT_DETAILS ALREADY EXISTS.');
                dbms_output.put_line('-----------------------------------------------------------------------------------------------------------');
        ELSE
        -- call to table creation stored procedure 
            BEGIN 
             complaint_details_creation;
            END;    
        DBMS_OUTPUT.PUT_LINE('TABLE COMPLAINT_DETAILS CREATED.');
        dbms_output.put_line('-----------------------------------------------------------------------------------------------------------');
        END IF;
        EXCEPTION 
          when no_data_found then
           dbms_output.put_line('Table does not exist!'); 
           -- call to table creation stored procedure 
           BEGIN 
             complaint_details_creation;
             dbms_output.put_line('Table COMPLAINT_DETAILS created successfully');
             dbms_output.put_line('-----------------------------------------------------------------------------------------------------------');
           END; 
            when others
                then
                dbms_output.put_line('OOPS Something went wrong!');
                dbms_output.put_line(dbms_utility.format_error_stack);
dbms_output.put_line('-----------------------------------------------------------------------------------------------------------');
END;
/



-----------###############INDEX CREATION############-----------------------------
/*
SET SERVEROUTPUT ON;
declare
EXISTS_ALREADY exception;
pragma exception_init( EXISTS_ALREADY, -955 );
begin
execute immediate 'CREATE UNIQUE INDEX usr_name_idx ON USER_DETAILS(USER_NAME)';
dbms_output.put_line( ' Index "usr_name_idx" Created Successfully ' );
exception
when EXISTS_ALREADY then
dbms_output.put_line( 'Index "usr_name_idx" exists already!' );
null;
end;
*/
