------------####TABLE CREATION SCRIPT####--------------

------------####1.USER_ROLES####-----------------------
SET SERVEROUTPUT ON;
create or replace PROCEDURE USER_ROLE_CREATION IS TABLE_NAME VARCHAR2(1000);   
BEGIN
-- TABLE CREATION QUERY
   TABLE_NAME:='
CREATE TABLE USER_ROLES(
ROLE_ID NUMBER GENERATED BY DEFAULT AS IDENTITY(START WITH 1 INCREMENT BY 1),
ROLE_NAME VARCHAR(25) NOT NULL,
ROLE_DESCRIPTION VARCHAR(100),
USER_TYPE CHAR(2) UNIQUE NOT NULL,
constraint PK_ROLE_ID PRIMARY KEY(ROLE_ID)
)';
   EXECUTE IMMEDIATE TABLE_NAME;
END USER_ROLE_CREATION;
/

DECLARE
        tbl_name varchar2(50);
        cnt NUMBER;
    BEGIN
        tbl_name := 'USER_ROLES';
        SELECT count(*) into cnt FROM user_tables where table_name = tbl_name;
        IF(cnt > 0)
        THEN
                DBMS_OUTPUT.PUT_LINE('TABLE USER_ROLES ALREADY EXISTS.');
                dbms_output.put_line('-----------------------------------------------------------------------------------------------------------');
        ELSE
        -- call to table creation stored procedure 
            BEGIN 
             USER_ROLE_CREATION;
            END;    
        DBMS_OUTPUT.PUT_LINE('TABLE USER_ROLES CREATED.');
        dbms_output.put_line('-----------------------------------------------------------------------------------------------------------');
        END IF;
        EXCEPTION 
          when no_data_found then
           dbms_output.put_line('Table does not exist!'); 
           -- call to table creation stored procedure 
           BEGIN 
             USER_ROLE_CREATION;
             dbms_output.put_line('Table USER_ROLES created successfully');
             dbms_output.put_line('-----------------------------------------------------------------------------------------------------------');
           END; 
            when others
                then
                dbms_output.put_line('OOPS Something went wrong!');
                dbms_output.put_line(dbms_utility.format_error_stack);
dbms_output.put_line('-----------------------------------------------------------------------------------------------------------');
END;
/


------------####2.USER_DETAILS####-----------------------
SET SERVEROUTPUT ON;
create or replace procedure user_details_creation is table_name varchar2(1000);  
BEGIN
-- table creation query
   table_name:='CREATE TABLE USER_DETAILS(
user_id NUMBER(10) GENERATED BY DEFAULT AS IDENTITY(START WITH 100 INCREMENT BY 1),
first_name VARCHAR(50) NOT NULL,
last_name VARCHAR(50) NOT NULL,
phone_no NUMBER(10) NOT NULL,
email VARCHAR(50) NOT NULL,
user_name VARCHAR(50) NOT NULL,
pass_word VARCHAR(50) NOT NULL,
address_line1 VARCHAR(100) NOT NULL,
address_line2 VARCHAR(100),
city VARCHAR(25) NOT NULL,
zipcode NUMBER(6) NOT NULL,
residence_state VARCHAR(25) NOT NULL,
country VARCHAR(10) NOT NULL,
dob DATE NOT NULL,
sex VARCHAR(10),
role_id NUMBER NOT NULL,
date_created  date DEFAULT SYSDATE NOT NULL,
CHECK(REGEXP_LIKE(email,''^[A-Za-z]+[A-Za-z0-9.]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,4}$'')),
CHECK(REGEXP_LIKE(first_name,''^[A-Za-z0-9]{1,16}$'')),
CHECK(REGEXP_LIKE(last_name,''^[A-Za-z0-9]{1,16}$'')),
CHECK(REGEXP_LIKE(phone_no,''^[0-9]{10}$'')),
CHECK(REGEXP_LIKE(user_name,''^[A-Za-z0-9]{1,16}$'')),
constraint PK_USER_ID PRIMARY KEY(USER_ID),
FOREIGN KEY (role_id) REFERENCES USER_ROLES(role_id)
)';
   EXECUTE IMMEDIATE table_name;
end;
/
DECLARE
        tbl_name varchar2(50);
        cnt NUMBER;
    BEGIN
        tbl_name := 'USER_DETAILS';
        SELECT count(*) into cnt FROM user_tables where table_name = tbl_name;
        IF(cnt > 0)
        THEN
                DBMS_OUTPUT.PUT_LINE('TABLE USER_DETAILS ALREADY EXISTS.');
                dbms_output.put_line('-----------------------------------------------------------------------------------------------------------');
        ELSE
        -- call to table creation stored procedure 
            BEGIN 
             user_details_creation;
            END;    
        DBMS_OUTPUT.PUT_LINE('TABLE USER_DETAILS CREATED.');
        dbms_output.put_line('-----------------------------------------------------------------------------------------------------------');
        END IF;
        EXCEPTION 
          when no_data_found then
           dbms_output.put_line('Table does not exist!'); 
           -- call to table creation stored procedure 
           BEGIN 
             user_details_creation;
             dbms_output.put_line('Table USER_DETAILS created successfully');
             dbms_output.put_line('-----------------------------------------------------------------------------------------------------------');
           END; 
            when others
                then
                dbms_output.put_line('OOPS Something went wrong!');
                dbms_output.put_line(dbms_utility.format_error_stack);
dbms_output.put_line('-----------------------------------------------------------------------------------------------------------');
END;
/



------------####3.MANAGEMENT_DETAILS####-----------------------
SET SERVEROUTPUT ON;
create or replace procedure management_details_creation is table_name varchar2(1000);   
BEGIN
-- table creation query
   table_name:='
CREATE TABLE MANAGEMENT_DETAILS(
MGID NUMBER GENERATED BY DEFAULT AS IDENTITY(START WITH 200 INCREMENT BY 1),
M_COMPANY_NAME VARCHAR(100) NOT NULL,
M_REGISTRATION_STATUS CHAR(1) NOT NULL,
M_DATE_CREATED DATE DEFAULT SYSDATE NOT NULL,
constraint PK_MGID PRIMARY KEY(MGID)
)';
   EXECUTE IMMEDIATE table_name;
end management_details_creation;
/
DECLARE
        tbl_name varchar2(50);
        cnt NUMBER;
    BEGIN
        tbl_name := 'MANAGEMENT_DETAILS';
        SELECT count(*) into cnt FROM user_tables where table_name = tbl_name;
        IF(cnt > 0)
        THEN
                DBMS_OUTPUT.PUT_LINE('TABLE MANAGEMENT_DETAILS ALREADY EXISTS.');
                dbms_output.put_line('-----------------------------------------------------------------------------------------------------------');
        ELSE
        -- call to table creation stored procedure 
            BEGIN 
             management_details_creation;
            END;    
        DBMS_OUTPUT.PUT_LINE('TABLE MANAGEMENT_DETAILS CREATED.');
        dbms_output.put_line('-----------------------------------------------------------------------------------------------------------');
        END IF;
        EXCEPTION 
          when no_data_found then
           dbms_output.put_line('Table does not exist!'); 
           -- call to table creation stored procedure 
           BEGIN 
             management_details_creation;
             dbms_output.put_line('Table MANAGEMENT_DETAILS created successfully');
             dbms_output.put_line('-----------------------------------------------------------------------------------------------------------');
           END; 
            when others
                then
                dbms_output.put_line('OOPS Something went wrong!');
                dbms_output.put_line(dbms_utility.format_error_stack);
dbms_output.put_line('-----------------------------------------------------------------------------------------------------------');
END;
/

------------####4.APARTMENT_DETAILS####-----------------------
SET SERVEROUTPUT ON;
create or replace procedure apartment_details_creation is table_name varchar2(4000);
BEGIN
-- table creation query
table_name:='CREATE TABLE apartment_details
             (
                          aid                 NUMBER  generated always AS identity(start WITH 300 increment BY 1),
                          availability        varchar2(255) NOT NULL,
                          no_of_tenants       number NOT NULL,
                          building_type       varchar2(255) NOT NULL,
                          built_year          number(4) NOT NULL,
                          location            varchar2(255) NOT NULL,
                          unit_no             number NOT NULL,
                          sqt_area            number NOT NULL,
                          building_no         number NOT NULL,
                          ac_system           CHAR(1) NOT NULL,
                          heater_system       CHAR(1) NOT NULL,
                          hot_water           CHAR(1) NOT NULL,
                          gas_connection      CHAR(1) NOT NULL,
                          electricity         CHAR(1) NOT NULL,
                          asbestos            CHAR(1) NOT NULL,
                          refrigarator        CHAR(1) NOT NULL,
                          no_of_bedrooms      CHAR(1) NOT NULL,
                          floor_no            number NOT NULL,
                          parking_available   CHAR(1) NOT NULL,
                          no_of_keys          number(1) NOT NULL,
                          oven                CHAR(1) NOT NULL,
                          status_keylock      CHAR(1) NOT NULL,
                          status_windows      CHAR(1) NOT NULL,
                          status_door         CHAR(1) NOT NULL,
                          status_toiletsink   CHAR(1) NOT NULL,
                          status_washsink     CHAR(1) NOT NULL,
                          owner_name          varchar2(255) NOT NULL,
                          special_description varchar2(255) NOT NULL,
                          no_of_bathrooms     number NOT NULL,
                          no_of_balcony       varchar2(255) NOT NULL,
                          broker_commission   number NOT NULL,
                          mgid                number NOT NULL,
                          CONSTRAINT pk_aid PRIMARY KEY (aid),
                          CONSTRAINT fk_apt_mgid FOREIGN KEY (mgid) REFERENCES admin.management_details (mgid)
             )';


EXECUTE IMMEDIATE table_name;
end apartment_details_creation;
/
DECLARE
        tbl_name varchar2(50);
        cnt NUMBER;
    BEGIN
        tbl_name := 'APARTMENT_DETAILS';
        SELECT count(*) into cnt FROM user_tables where table_name = tbl_name;
        IF(cnt > 0)
        THEN
                DBMS_OUTPUT.PUT_LINE('TABLE APARTMENT_DETAILS ALREADY EXISTS.');
                dbms_output.put_line('-----------------------------------------------------------------------------------------------------------');
        ELSE
        -- call to table creation stored procedure 
            BEGIN 
             apartment_details_creation;
            END;    
        DBMS_OUTPUT.PUT_LINE('TABLE APARTMENT_DETAILS CREATED.');
        dbms_output.put_line('-----------------------------------------------------------------------------------------------------------');
        END IF;
        EXCEPTION 
          when no_data_found then
           dbms_output.put_line('Table does not exist!'); 
           -- call to table creation stored procedure 
           BEGIN 
             apartment_details_creation;
             dbms_output.put_line('Table APARTMENT_DETAILS created successfully');
             dbms_output.put_line('-----------------------------------------------------------------------------------------------------------');
           END; 
            when others
                then
                dbms_output.put_line('OOPS Something went wrong!');
                dbms_output.put_line(dbms_utility.format_error_stack);
dbms_output.put_line('-----------------------------------------------------------------------------------------------------------');
END;
/
